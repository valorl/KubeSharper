{{~
    head = resources | array.first
    tail = resources | array.offset 1
~}}
using k8s;
using k8s.Models;
using KubeSharper.Utils;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace KubeSharper.EventSources
{
    public partial class EventSources : IEventSources
    {

        public EventSource<T> GetNamespacedFor<T>(IKubernetes operations, string @namespace, CancellationToken cancellationToken = default)
        {
            var t = typeof(T);
            if (t == typeof({{ head.type }})) return (EventSource<T>)(object){{ head.type }}(operations, @namespace, cancellationToken);
{{~ for r in tail ~}}
            else if (t == typeof({{ r.type }})) return (EventSource<T>)(object){{ r.type }}(operations, @namespace, cancellationToken);
{{~ end ~}}
            else throw new NotImplementedException();
        }

{{~ for r in resources ~}}

        private EventSource<{{ r.type }}> {{ r.type }}(IKubernetes operations, string @namespace, CancellationToken ct)
        {
            async Task<Watcher<{{ r.type }}>> WatchMaker(EventSourceHandler onEvent)
            {
                var list = await operations.{{ r.http_message_lister }}(@namespace, watch: true);
                var watch = list.Watch(async (WatchEventType et, {{ r.type }} obj) =>
                {
                    var metaObj = new KubernetesV1MetaObject
                    {
                        ApiVersion = obj.ApiVersion,
                        Kind = obj.Kind,
                        Metadata = obj.Metadata
                    };
                    await onEvent(et.ToInternal(), metaObj); 
                }, OnError<{{ r.type }}>, OnClose<{{ r.type }}>);
                return watch;
            }

            async Task<IList<{{ r.type }}>> Lister()
            {
                var list = await operations.{{ r.lister }}(@namespace);
                var kind = list.Kind.Replace("List", "");
                foreach (var i in list.Items)
                {
                    i.ApiVersion = list.ApiVersion;
                    i.Kind = kind;
                }
                return list.Items;
            }

            var source = new EventSource<{{ r.type }}>(WatchMaker, Lister, ct: ct);
            return source;
        }
{{~ end ~}}
    }
}
